"""
Servi√ßo para envio de formul√°rios di√°rios de avalia√ß√£o.
Envia emails com formul√°rios HTML nas segundas, quartas e sextas.
"""

from datetime import datetime, timedelta
from typing import List
from ..models.result import Result
from .email_service import EmailService
from .daily_form_service import format_daily_form_email
from ..config.settings import settings


class DailyFormService:
    """Servi√ßo para envio de formul√°rios di√°rios."""
    
    def __init__(self):
        """Inicializa o servi√ßo de formul√°rios di√°rios."""
        self.email_service = EmailService()
        self.target_email = None
    
    def send_daily_form(self, target_email: str) -> Result:
        """
        Envia o formul√°rio de avalia√ß√£o di√°ria.
        
        Args:
            target_email: Email que receber√° o formul√°rio
            
        Returns:
            Result: Resultado da opera√ß√£o
        """
        try:
            self.target_email = target_email
            
            # Obt√©m data e hor√°rio atual
            now = datetime.now()
            date_str = now.strftime("%d/%m/%Y")
            time_str = now.strftime("%H:%M")
            
            # Cria o assunto do email
            subject = f"üìù Di√°rio Inteligente - Avalia√ß√£o Di√°ria ({date_str})"
            
            # URL do formul√°rio web (voc√™ precisar√° configurar isso)
            form_url = f"https://seu-dominio.com/formulario?email={target_email}&date={date_str}"
            
            # Gera o HTML do email de notifica√ß√£o
            html_body = format_daily_form_email(date_str, time_str, form_url)
            
            # Envia o email HTML
            result = self.email_service.send_html_email(target_email, subject, html_body)
            
            if result.success:
                print(f"‚úÖ Formul√°rio di√°rio enviado para: {target_email}")
                print(f"üìÖ Data: {date_str} √†s {time_str}")
            else:
                print(f"‚ùå Erro ao enviar formul√°rio: {result.get_first_error()}")
            
            return result
            
        except Exception as e:
            return Result.error_result(f"Erro ao enviar formul√°rio di√°rio: {str(e)}")
    
    def is_daily_form_day(self) -> bool:
        """
        Verifica se hoje √© um dia para envio de formul√°rio.
        Segunda (0), Quarta (2), Sexta (4)
        
        Returns:
            bool: True se √© dia de formul√°rio
        """
        today = datetime.now().weekday()
        return today in [0, 2, 4]  # Segunda, Quarta, Sexta
    
    def get_next_form_day(self) -> str:
        """
        Retorna a pr√≥xima data de envio de formul√°rio.
        
        Returns:
            str: Pr√≥xima data no formato dd/mm/yyyy
        """
        today = datetime.now()
        
        # Dias da semana: Segunda=0, Ter√ßa=1, Quarta=2, Quinta=3, Sexta=4, S√°bado=5, Domingo=6
        form_days = [0, 2, 4]  # Segunda, Quarta, Sexta
        
        # Procura o pr√≥ximo dia de formul√°rio
        for days_ahead in range(1, 8):  # Pr√≥ximos 7 dias
            next_day = today + timedelta(days=days_ahead)
            if next_day.weekday() in form_days:
                return next_day.strftime("%d/%m/%Y")
        
        return "N√£o encontrado"
    
    def schedule_daily_form(self, target_email: str) -> Result:
        """
        Agenda o envio do formul√°rio di√°rio.
        Este m√©todo ser√° chamado pelo GitHub Actions.
        
        Args:
            target_email: Email que receber√° o formul√°rio
            
        Returns:
            Result: Resultado da opera√ß√£o
        """
        try:
            print(f"üìÖ Verificando se hoje √© dia de formul√°rio...")
            
            if not self.is_daily_form_day():
                print("‚ÑπÔ∏è  Hoje n√£o √© dia de formul√°rio (Segunda/Quarta/Sexta)")
                return Result.success_result("N√£o √© dia de formul√°rio")
            
            print(f"üìù Enviando formul√°rio di√°rio para: {target_email}")
            
            result = self.send_daily_form(target_email)
            
            if result.success:
                print("‚úÖ Formul√°rio di√°rio enviado com sucesso!")
            else:
                print(f"‚ùå Erro ao enviar formul√°rio: {result.get_first_error()}")
            
            return result
            
        except Exception as e:
            error_msg = f"Erro no formul√°rio agendado: {str(e)}"
            print(f"‚ùå {error_msg}")
            return Result.error_result(error_msg)
    
    def get_form_schedule_info(self) -> dict:
        """
        Retorna informa√ß√µes sobre o cronograma de formul√°rios.
        
        Returns:
            dict: Informa√ß√µes do cronograma
        """
        return {
            'is_today_form_day': self.is_daily_form_day(),
            'next_form_day': self.get_next_form_day(),
            'form_days': ['Segunda-feira', 'Quarta-feira', 'Sexta-feira'],
            'form_time': '20:00',
            'current_day': datetime.now().strftime("%A")
        }
