"""
Servi√ßo para gera√ß√£o de relat√≥rios semanais autom√°ticos.
Combina dados estat√≠sticos com an√°lise de IA para criar relat√≥rios personalizados.
"""

from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from ..models.result import Result
from ..models.review import Review
from .database_service import DatabaseService
from .email_service import EmailService
from .ai_analysis_service import AIAnalysisService
from ..config.settings import settings


class WeeklyReportService:
    """Servi√ßo para gera√ß√£o e envio de relat√≥rios semanais."""
    
    def __init__(self):
        """Inicializa o servi√ßo de relat√≥rio semanal."""
        self.db_service = DatabaseService()
        self.email_service = EmailService()
        self.ai_service = AIAnalysisService()
    
    def generate_weekly_report(self, target_email: Optional[str] = None) -> Result:
        """
        Gera e envia o relat√≥rio semanal completo.
        
        Args:
            target_email: Email para envio (se None, usa configura√ß√£o padr√£o)
            
        Returns:
            Result: Resultado da opera√ß√£o
        """
        try:
            print("üìä Gerando relat√≥rio semanal...")
            
            # 1. Busca dados da semana
            weekly_data_result = self.db_service.get_weekly_average()
            if not weekly_data_result.success:
                return weekly_data_result
            
            weekly_data = weekly_data_result.data
            
            # 2. Busca avalia√ß√µes da semana para an√°lise
            reviews_result = self._get_weekly_reviews()
            if not reviews_result.success:
                return reviews_result
            
            reviews = reviews_result.data
            
            # 3. Gera an√°lise com IA
            analysis_result = self.ai_service.analyze_weekly_data(weekly_data, reviews)
            if not analysis_result.success:
                return analysis_result
            
            analysis = analysis_result.data
            
            # 4. Cria o relat√≥rio completo
            report = self._create_complete_report(weekly_data, analysis)
            
            # 5. Envia por email se solicitado
            if target_email:
                email_result = self._send_weekly_report(target_email, report)
                if not email_result.success:
                    return email_result
            
            return Result.success_result({
                'report': report,
                'weekly_data': weekly_data,
                'analysis': analysis,
                'email_sent': target_email is not None
            })
            
        except Exception as e:
            return Result.error_result(f"Erro ao gerar relat√≥rio semanal: {str(e)}")
    
    def _get_weekly_reviews(self) -> Result:
        """Busca avalia√ß√µes da √∫ltima semana."""
        try:
            # Calcula data de uma semana atr√°s
            end_date = datetime.now().strftime('%Y-%m-%d')
            start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            
            # Tenta buscar por per√≠odo, se n√£o conseguir, busca todas
            result = self.db_service.get_reviews_by_date_range(start_date, end_date)
            if not result.success:
                # Se falhar, busca todas as avalia√ß√µes
                result = self.db_service.get_all_reviews()
            
            return result
            
        except Exception as e:
            return Result.error_result(f"Erro ao buscar avalia√ß√µes da semana: {str(e)}")
    
    def _create_complete_report(self, weekly_data: Dict[str, Any], analysis: Dict[str, Any]) -> str:
        """Cria o relat√≥rio completo formatado."""
        
        report = f"""
üéØ {settings.APP_NAME} - RELAT√ìRIO SEMANAL
{'=' * 50}

{analysis['motivational_message']}

üìä ESTAT√çSTICAS DA SEMANA:
‚Ä¢ Trabalho: {weekly_data['avg_work']}/10
‚Ä¢ Treino: {weekly_data['avg_training']}/10  
‚Ä¢ Estudos: {weekly_data['avg_studies']}/10
‚Ä¢ Mente: {weekly_data['avg_mind']}/10

üéØ M√âDIA GERAL: {weekly_data['overall_average']}/10
üìÖ Total de avalia√ß√µes: {weekly_data['total_reviews']} dias

{analysis['weekly_summary']}

üí° INSIGHTS DA SEMANA:
"""
        
        # Adiciona insights
        for insight in analysis['insights']:
            report += f"‚Ä¢ {insight}\n"
        
        report += f"""
üéØ RECOMENDA√á√ïES PARA PR√ìXIMA SEMANA:
"""
        
        # Adiciona recomenda√ß√µes
        for recommendation in analysis['recommendations']:
            report += f"‚Ä¢ {recommendation}\n"
        
        report += f"""
üåü LEMBRE-SE:
Cada dia √© uma nova oportunidade de crescimento. 
Pequenas melhorias di√°rias levam a grandes transforma√ß√µes!

---
üì± Gerado automaticamente pelo {settings.APP_NAME} v{settings.APP_VERSION}
üïí {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
        """.strip()
        
        return report
    
    def _send_weekly_report(self, email: str, report: str) -> Result:
        """Envia o relat√≥rio por email."""
        try:
            subject = f"{settings.APP_NAME} - Relat√≥rio Semanal ({datetime.now().strftime('%d/%m/%Y')})"
            
            # Adiciona formata√ß√£o HTML para melhor visualiza√ß√£o
            html_body = self._format_html_email(report)
            
            return self.email_service.send_email(email, subject, html_body)
            
        except Exception as e:
            return Result.error_result(f"Erro ao enviar relat√≥rio: {str(e)}")
    
    def _format_html_email(self, report: str) -> str:
        """Formata o relat√≥rio para HTML."""
        # Converte quebras de linha para HTML
        html_report = report.replace('\n', '<br>')
        
        # Adiciona estilos b√°sicos
        html_body = f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
            <div style="max-width: 600px; margin: 0 auto; padding: 20px;">
                {html_report}
            </div>
        </body>
        </html>
        """
        
        return html_body
    
    def schedule_weekly_report(self, target_email: str) -> Result:
        """
        Agenda o envio do relat√≥rio semanal.
        Este m√©todo ser√° chamado pelo GitHub Actions.
        """
        try:
            print(f"üïí Executando relat√≥rio semanal agendado para: {target_email}")
            
            result = self.generate_weekly_report(target_email)
            
            if result.success:
                print("‚úÖ Relat√≥rio semanal enviado com sucesso!")
            else:
                print(f"‚ùå Erro ao enviar relat√≥rio: {result.get_first_error()}")
            
            return result
            
        except Exception as e:
            error_msg = f"Erro no relat√≥rio agendado: {str(e)}"
            print(f"‚ùå {error_msg}")
            return Result.error_result(error_msg)
